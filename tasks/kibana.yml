---
- name: Download Kibana tarball.
  get_url:
    url: https://download.elastic.co/kibana/kibana/kibana-{{ kibana_version }}-linux-x64.tar.gz
    dest: /opt/kibana-{{ kibana_version }}-linux-x64.tar.gz
    # Don't download file every time, only if it doesn't exist.
    force: no

- name: Check for existing Kibana installation.
  stat:
    path: /opt/kibana-{{ kibana_version }}-linux-x64
  register: kibana_directory_check

- name: Extract Kibana tarball.
  unarchive:
    copy: no
    src: /opt/kibana-{{ kibana_version }}-linux-x64.tar.gz
    dest: /opt/
    owner: "{{ elk_nginx_user }}"
    group: "{{ elk_nginx_user }}"
  when: kibana_directory_check.stat.exists == false

- name: Symlink Kibana directory.
  file:
    state: link
    dest: /opt/kibana
    src: /opt/kibana-{{ kibana_version }}-linux-x64
    owner: "{{ elk_nginx_user }}"
    group: "{{ elk_nginx_user }}"

- name: Set PaX flags on NodeJS binary.
  command: paxctl -Cm /opt/kibana/node/bin/node
  notify: restart kibana
  when: elk_disable_memprotect == true

- name: Configure Kibana to listen only on localhost.
  lineinfile:
    dest: /opt/kibana/config/kibana.yml
    regexp: '^server\.host'
    line: 'server.host: "localhost"'
    state: present
  notify:
    - restart kibana

- name: Create Kibana systemd service file.
  template:
    src: kibana.service.j2
    dest: /etc/systemd/system/kibana.service
    owner: root
    group: root
    mode: "0644"
  notify:
    - reload systemd
    - restart kibana

- name: Start kibana service.
  service:
    name: kibana
    state: running

